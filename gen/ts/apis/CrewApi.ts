/* tslint:disable */
/* eslint-disable */
/**
 * Navigate API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  CrewCertificate,
  CrewCertificateFromJSON,
  CrewCertificateToJSON,
  CrewCertificatePagination,
  CrewCertificatePaginationFromJSON,
  CrewCertificatePaginationToJSON,
  CrewDetails,
  CrewDetailsFromJSON,
  CrewDetailsToJSON,
  CrewDetailsPagination,
  CrewDetailsPaginationFromJSON,
  CrewDetailsPaginationToJSON,
} from '../models';

export interface DeleteCrewCertItemRequest {
  id: string;
}

export interface DeleteCrewItemRequest {
  id: string;
}

export interface GetCrewCertRequest {
  page?: number;
  perPage?: number;
  overdue?: AnyType;
  crewId?: string;
  customerId?: string;
}

export interface GetCrewCertItemRequest {
  id: string;
}

export interface GetCrewDetailsListRequest {
  page?: number;
  perPage?: number;
  overdue?: AnyType;
  assignedVessel?: string;
  customerId?: string;
}

export interface GetCrewItemRequest {
  id: string;
}

export interface PostCrewCertRequest {
  payload: CrewCertificate;
}

export interface PostCrewListRequest {
  payload: CrewDetails;
}

export interface PutCrewCertItemRequest {
  id: string;
  payload: CrewCertificate;
}

export interface PutCrewItemRequest {
  id: string;
  payload: CrewDetails;
}

/**
 *
 */
export class CrewApi extends runtime.BaseAPI {
  /**
   * All related documents will be removed.
   * Delete crew
   */
  async deleteCrewCertItemRaw(
    requestParameters: DeleteCrewCertItemRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deleteCrewCertItem.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey(
        'authorization'
      ); // apikey authentication
    }

    const response = await this.request({
      path: `/crewcert/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * All related documents will be removed.
   * Delete crew
   */
  async deleteCrewCertItem(
    requestParameters: DeleteCrewCertItemRequest
  ): Promise<void> {
    await this.deleteCrewCertItemRaw(requestParameters);
  }

  /**
   * All related documents will be removed.
   * Delete crew
   */
  async deleteCrewItemRaw(
    requestParameters: DeleteCrewItemRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deleteCrewItem.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey(
        'authorization'
      ); // apikey authentication
    }

    const response = await this.request({
      path: `/crew/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * All related documents will be removed.
   * Delete crew
   */
  async deleteCrewItem(
    requestParameters: DeleteCrewItemRequest
  ): Promise<void> {
    await this.deleteCrewItemRaw(requestParameters);
  }

  /**
   * Get CrewCertificates list
   */
  async getCrewCertRaw(
    requestParameters: GetCrewCertRequest
  ): Promise<runtime.ApiResponse<CrewCertificatePagination>> {
    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.perPage !== undefined) {
      queryParameters['per_page'] = requestParameters.perPage;
    }

    if (requestParameters.overdue !== undefined) {
      queryParameters['overdue'] = requestParameters.overdue;
    }

    if (requestParameters.crewId !== undefined) {
      queryParameters['crew_id'] = requestParameters.crewId;
    }

    if (requestParameters.customerId !== undefined) {
      queryParameters['customer_id'] = requestParameters.customerId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey(
        'authorization'
      ); // apikey authentication
    }

    const response = await this.request({
      path: `/crewcert/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, jsonValue =>
      CrewCertificatePaginationFromJSON(jsonValue)
    );
  }

  /**
   * Get CrewCertificates list
   */
  async getCrewCert(
    requestParameters: GetCrewCertRequest
  ): Promise<CrewCertificatePagination> {
    const response = await this.getCrewCertRaw(requestParameters);
    return await response.value();
  }

  /**
   * Get CrewCertificates information
   */
  async getCrewCertItemRaw(
    requestParameters: GetCrewCertItemRequest
  ): Promise<runtime.ApiResponse<CrewCertificate>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getCrewCertItem.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey(
        'authorization'
      ); // apikey authentication
    }

    const response = await this.request({
      path: `/crewcert/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, jsonValue =>
      CrewCertificateFromJSON(jsonValue)
    );
  }

  /**
   * Get CrewCertificates information
   */
  async getCrewCertItem(
    requestParameters: GetCrewCertItemRequest
  ): Promise<CrewCertificate> {
    const response = await this.getCrewCertItemRaw(requestParameters);
    return await response.value();
  }

  /**
   * Get CrewDetails list
   */
  async getCrewDetailsListRaw(
    requestParameters: GetCrewDetailsListRequest
  ): Promise<runtime.ApiResponse<CrewDetailsPagination>> {
    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.perPage !== undefined) {
      queryParameters['per_page'] = requestParameters.perPage;
    }

    if (requestParameters.overdue !== undefined) {
      queryParameters['overdue'] = requestParameters.overdue;
    }

    if (requestParameters.assignedVessel !== undefined) {
      queryParameters['assigned_vessel'] = requestParameters.assignedVessel;
    }

    if (requestParameters.customerId !== undefined) {
      queryParameters['customer_id'] = requestParameters.customerId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey(
        'authorization'
      ); // apikey authentication
    }

    const response = await this.request({
      path: `/crew/`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(
      response,
      jsonValue => CrewDetailsPaginationFromJSON(jsonValue)
      // jsonValue.map(CrewDetailsPaginationFromJSON)
    );
  }

  /**
   * Get CrewDetails list
   */
  async getCrewDetailsList(
    requestParameters: GetCrewDetailsListRequest
  ): Promise<CrewDetailsPagination> {
    const response = await this.getCrewDetailsListRaw(requestParameters);
    return await response.value();
  }

  /**
   * Get CrewDetails information
   */
  async getCrewItemRaw(
    requestParameters: GetCrewItemRequest
  ): Promise<runtime.ApiResponse<CrewDetails>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getCrewItem.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey(
        'authorization'
      ); // apikey authentication
    }

    const response = await this.request({
      path: `/crew/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, jsonValue =>
      CrewDetailsFromJSON(jsonValue)
    );
  }

  /**
   * Get CrewDetails information
   */
  async getCrewItem(
    requestParameters: GetCrewItemRequest
  ): Promise<CrewDetails> {
    const response = await this.getCrewItemRaw(requestParameters);
    return await response.value();
  }

  /**
   * Create new CrewCertificates
   */
  async postCrewCertRaw(
    requestParameters: PostCrewCertRequest
  ): Promise<runtime.ApiResponse<CrewCertificate>> {
    if (
      requestParameters.payload === null ||
      requestParameters.payload === undefined
    ) {
      throw new runtime.RequiredError(
        'payload',
        'Required parameter requestParameters.payload was null or undefined when calling postCrewCert.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey(
        'authorization'
      ); // apikey authentication
    }

    const response = await this.request({
      path: `/crewcert/`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CrewCertificateToJSON(requestParameters.payload),
    });

    return new runtime.JSONApiResponse(response, jsonValue =>
      CrewCertificateFromJSON(jsonValue)
    );
  }

  /**
   * Create new CrewCertificates
   */
  async postCrewCert(
    requestParameters: PostCrewCertRequest
  ): Promise<CrewCertificate> {
    const response = await this.postCrewCertRaw(requestParameters);
    return await response.value();
  }

  /**
   * Create new Crew Member
   */
  async postCrewListRaw(
    requestParameters: PostCrewListRequest
  ): Promise<runtime.ApiResponse<CrewDetails>> {
    if (
      requestParameters.payload === null ||
      requestParameters.payload === undefined
    ) {
      throw new runtime.RequiredError(
        'payload',
        'Required parameter requestParameters.payload was null or undefined when calling postCrewList.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey(
        'authorization'
      ); // apikey authentication
    }

    const response = await this.request({
      path: `/crew/`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CrewDetailsToJSON(requestParameters.payload),
    });

    return new runtime.JSONApiResponse(response, jsonValue =>
      CrewDetailsFromJSON(jsonValue)
    );
  }

  /**
   * Create new Crew Member
   */
  async postCrewList(
    requestParameters: PostCrewListRequest
  ): Promise<CrewDetails> {
    const response = await this.postCrewListRaw(requestParameters);
    return await response.value();
  }

  /**
   * Update crew
   */
  async putCrewCertItemRaw(
    requestParameters: PutCrewCertItemRequest
  ): Promise<runtime.ApiResponse<CrewCertificate>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling putCrewCertItem.'
      );
    }

    if (
      requestParameters.payload === null ||
      requestParameters.payload === undefined
    ) {
      throw new runtime.RequiredError(
        'payload',
        'Required parameter requestParameters.payload was null or undefined when calling putCrewCertItem.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey(
        'authorization'
      ); // apikey authentication
    }

    const response = await this.request({
      path: `/crewcert/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: CrewCertificateToJSON(requestParameters.payload),
    });

    return new runtime.JSONApiResponse(response, jsonValue =>
      CrewCertificateFromJSON(jsonValue)
    );
  }

  /**
   * Update crew
   */
  async putCrewCertItem(
    requestParameters: PutCrewCertItemRequest
  ): Promise<CrewCertificate> {
    const response = await this.putCrewCertItemRaw(requestParameters);
    return await response.value();
  }

  /**
   * Update crew
   */
  async putCrewItemRaw(
    requestParameters: PutCrewItemRequest
  ): Promise<runtime.ApiResponse<CrewDetails>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling putCrewItem.'
      );
    }

    if (
      requestParameters.payload === null ||
      requestParameters.payload === undefined
    ) {
      throw new runtime.RequiredError(
        'payload',
        'Required parameter requestParameters.payload was null or undefined when calling putCrewItem.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['authorization'] = this.configuration.apiKey(
        'authorization'
      ); // apikey authentication
    }

    const response = await this.request({
      path: `/crew/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: CrewDetailsToJSON(requestParameters.payload),
    });

    return new runtime.JSONApiResponse(response, jsonValue =>
      CrewDetailsFromJSON(jsonValue)
    );
  }

  /**
   * Update crew
   */
  async putCrewItem(
    requestParameters: PutCrewItemRequest
  ): Promise<CrewDetails> {
    const response = await this.putCrewItemRaw(requestParameters);
    return await response.value();
  }
}
